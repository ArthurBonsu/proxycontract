{
  "address": "0x8e595e7be7b58d0b315A9B445CbAFC345c1b0699",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "__owner",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_eventgameid",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address payable",
          "name": "_eventtheplayeraddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "_eventchoicemade",
          "type": "string"
        }
      ],
      "name": "eventplaygame",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_gameid",
          "type": "uint256"
        }
      ],
      "name": "_checkgameregistered",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_gameid",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_playeraddress",
          "type": "address"
        }
      ],
      "name": "_checkplayeringame",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address payable",
          "name": "_playeraddress",
          "type": "address"
        }
      ],
      "name": "_checkplayerregistered",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "_games",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "gameid",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "gamecount",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "_owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "_playerstore",
      "outputs": [
        {
          "internalType": "address payable",
          "name": "playeraddress",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "playername",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "playerscore",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "playerbalance",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "_playinggames",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "playinggameid",
          "type": "uint256"
        },
        {
          "internalType": "address payable",
          "name": "playerininaddress",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "gameover",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "gamescore",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "playerscount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "duration",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        }
      ],
      "name": "allowance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "burn",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "game_id",
          "type": "uint256"
        },
        {
          "internalType": "address payable",
          "name": "_playeraddress",
          "type": "address"
        }
      ],
      "name": "choosegametostake",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "decimals",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "subtractedValue",
          "type": "uint256"
        }
      ],
      "name": "decreaseAllowance",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "gameinplay",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "playinggameid",
          "type": "uint256"
        },
        {
          "internalType": "address payable",
          "name": "playerininaddress",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "gameover",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "gamescore",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "playerscount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "duration",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "gamesregistered",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "gameid",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "gamecount",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "addedValue",
          "type": "uint256"
        }
      ],
      "name": "increaseAllowance",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "mint",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address payable",
          "name": "sender",
          "type": "address"
        },
        {
          "internalType": "address payable",
          "name": "owneraddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "payfee",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "playersregistered",
      "outputs": [
        {
          "internalType": "address payable",
          "name": "playeraddress",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "playername",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "playerscore",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "playerbalance",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "prev_gamestaked",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_gameid",
          "type": "uint256"
        }
      ],
      "name": "registergame",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_playername",
          "type": "string"
        },
        {
          "internalType": "address payable",
          "name": "_playeraddress",
          "type": "address"
        }
      ],
      "name": "registerplayername",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "selectPaper",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "selectRock",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "selectScissors",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "stakeprevwinnings",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalsupplytokens",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transfer",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xdd24130596b3a9e1e6cb6a74608ea8979ae853a99fe4876966b7a421f3152f24",
  "receipt": {
    "to": null,
    "from": "0x06Da25591CdF58758C4b3aBbFf18B092e4380B65",
    "contractAddress": "0x8e595e7be7b58d0b315A9B445CbAFC345c1b0699",
    "transactionIndex": 10,
    "gasUsed": "3487689",
    "logsBloom": "0x40000000000000000000000000000000000000000000000000800000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000020000000000000400000c00000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002000000000000000000000000010000000000000000000000000020000000000000000000000000000000000000000000000000000000000000000000",
    "blockHash": "0x9e215d87a116790cc0a46a6d779dc511f7d1d082593a9c8df656fb9791c5fc97",
    "transactionHash": "0xdd24130596b3a9e1e6cb6a74608ea8979ae853a99fe4876966b7a421f3152f24",
    "logs": [
      {
        "transactionIndex": 10,
        "blockNumber": 9812858,
        "transactionHash": "0xdd24130596b3a9e1e6cb6a74608ea8979ae853a99fe4876966b7a421f3152f24",
        "address": "0x8e595e7be7b58d0b315A9B445CbAFC345c1b0699",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x00000000000000000000000006da25591cdf58758c4b3abbff18b092e4380b65"
        ],
        "data": "0x",
        "logIndex": 13,
        "blockHash": "0x9e215d87a116790cc0a46a6d779dc511f7d1d082593a9c8df656fb9791c5fc97"
      }
    ],
    "blockNumber": 9812858,
    "cumulativeGasUsed": "6023876",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x06Da25591CdF58758C4b3aBbFf18B092e4380B65"
  ],
  "solcInputHash": "3933dc1c528582fa697235f5ef7f7076",
  "metadata": "{\"compiler\":{\"version\":\"0.8.2+commit.92b52cbf\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"__owner\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_eventgameid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address payable\",\"name\":\"_eventtheplayeraddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"_eventchoicemade\",\"type\":\"string\"}],\"name\":\"eventplaygame\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_gameid\",\"type\":\"uint256\"}],\"name\":\"_checkgameregistered\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_gameid\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_playeraddress\",\"type\":\"address\"}],\"name\":\"_checkplayeringame\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_playeraddress\",\"type\":\"address\"}],\"name\":\"_checkplayerregistered\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"_games\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"gameid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"gamecount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_playerstore\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"playeraddress\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"playername\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"playerscore\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"playerbalance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"_playinggames\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"playinggameid\",\"type\":\"uint256\"},{\"internalType\":\"address payable\",\"name\":\"playerininaddress\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"gameover\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"gamescore\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"playerscount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"game_id\",\"type\":\"uint256\"},{\"internalType\":\"address payable\",\"name\":\"_playeraddress\",\"type\":\"address\"}],\"name\":\"choosegametostake\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"gameinplay\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"playinggameid\",\"type\":\"uint256\"},{\"internalType\":\"address payable\",\"name\":\"playerininaddress\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"gameover\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"gamescore\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"playerscount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"gamesregistered\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"gameid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"gamecount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"owneraddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"payfee\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"playersregistered\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"playeraddress\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"playername\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"playerscore\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"playerbalance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"prev_gamestaked\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_gameid\",\"type\":\"uint256\"}],\"name\":\"registergame\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_playername\",\"type\":\"string\"},{\"internalType\":\"address payable\",\"name\":\"_playeraddress\",\"type\":\"address\"}],\"name\":\"registerplayername\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"selectPaper\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"selectRock\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"selectScissors\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakeprevwinnings\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalsupplytokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"details\":\"See {IERC20-allowance}.\"},\"approve(address,uint256)\":{\"details\":\"See {IERC20-approve}. Requirements: - `spender` cannot be the zero address.\"},\"balanceOf(address)\":{\"details\":\"See {IERC20-balanceOf}.\"},\"decimals()\":{\"details\":\"Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the value {ERC20} uses, unless this function is overridden; NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}.\"},\"decreaseAllowance(address,uint256)\":{\"details\":\"Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`.\"},\"increaseAllowance(address,uint256)\":{\"details\":\"Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address.\"},\"name()\":{\"details\":\"Returns the name of the token.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"symbol()\":{\"details\":\"Returns the symbol of the token, usually a shorter version of the name.\"},\"totalSupply()\":{\"details\":\"See {IERC20-totalSupply}.\"},\"transfer(address,uint256)\":{\"details\":\"See {IERC20-transfer}. Requirements: - `recipient` cannot be the zero address. - the caller must have a balance of at least `amount`.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. Requirements: - `sender` and `recipient` cannot be the zero address. - `sender` must have a balance of at least `amount`. - the caller must have allowance for ``sender``'s tokens of at least `amount`.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"constructor\":{\"notice\":\"npn Contract initialization. The `constructor` is executed only once when the contract is created.\"},\"payfee(address,address,uint256)\":{\"notice\":\"A function to transfer tokens. The `external` modifier makes a function *only* callable from outside the contract.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/RockPaperScissors.sol\":\"RockPaperScissors\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _setOwner(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _setOwner(newOwner);\\n    }\\n\\n    function _setOwner(address newOwner) private {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x6bb804a310218875e89d12c053e94a13a4607cdf7cc2052f3e52bd32a0dc50a1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `recipient` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` and `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``sender``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n\\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\\n        require(currentAllowance >= amount, \\\"ERC20: transfer amount exceeds allowance\\\");\\n        unchecked {\\n            _approve(sender, _msgSender(), currentAllowance - amount);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(_msgSender(), spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) internal virtual {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(sender, recipient, amount);\\n\\n        uint256 senderBalance = _balances[sender];\\n        require(senderBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[sender] = senderBalance - amount;\\n        }\\n        _balances[recipient] += amount;\\n\\n        emit Transfer(sender, recipient, amount);\\n\\n        _afterTokenTransfer(sender, recipient, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        _balances[account] += amount;\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n        }\\n        _totalSupply -= amount;\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0xb03df8481a954604ad0c9125680893b2e3f7ff770fe470e38b89ac61b84e8072\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x027b891937d20ccf213fdb9c31531574256de774bda99d3a70ecef6e1913ed2a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x83fe24f5c04a56091e50f4a345ff504c8bff658a76d4c43b16878c8f940c53b2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.2;\\n//pragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x9742802cdb689c7494b06a4820508141e5a7d9270353ae6a79311bd05a0cc171\",\"license\":\"MIT\"},\"contracts/RockPaperScissors.sol\":{\"content\":\"// Solidity files have to start with this pragma.\\r\\n// It will be used by the Solidity compiler to validate its version.\\r\\npragma solidity 0.8.2;\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\nimport '../contracts/libraries/StringUtils.sol';\\r\\n\\r\\n\\r\\n// This is the main building block for smart contracts.\\r\\ncontract RockPaperScissors is    Ownable,ERC20 {\\r\\n    \\r\\n    // We set the 3 options players are required to choose\\r\\n    // We set it to constant to avoid wrong typo, safer for the contract\\r\\n    string constant   rock = \\\"rock\\\" ;\\r\\n    string constant  paper = \\\"paper\\\";\\r\\n    string constant  scissors = \\\"scissors\\\";\\r\\n    bool   rockchosen = false;\\r\\n    bool   scissorschosen = false;\\r\\n    bool   paperchosen = false;\\r\\n    string choicemade;\\r\\n    bool   setprevwinnings = false;\\r\\n    uint   public prev_gamestaked;\\r\\n    string private _tokenname =\\\"RPSTOKENS\\\";\\r\\n    string private _tokensymbol= \\\"RPS\\\";\\r\\n    address public _owner;\\r\\n    uint randNonce =0;\\r\\n    uint modulus =0;\\r\\n    uint _payfee=0;\\r\\n    uint maxWaitTime = 100;\\r\\n         \\r\\n  //  address  owner; \\r\\n // We decide to use the mapping instead of the struct approach\\r\\n       struct Game {\\r\\n             uint  gameid; \\r\\n             uint256 gamecount;\\r\\n             }\\r\\n\\r\\n       struct Players {\\r\\n              address payable playeraddress;\\r\\n              string playername;\\r\\n              uint256 playerscore;\\r\\n              uint256 playerbalance;\\r\\n              }\\r\\n       \\r\\n       struct PlayingGame{\\r\\n            uint playinggameid;\\r\\n            address payable playerininaddress;\\r\\n            bool gameover;    \\r\\n            uint256 gamescore; \\r\\n            uint256 playerscount;\\r\\n            uint duration;\\r\\n            }\\r\\n\\r\\n    // The fixed amount of tokens stored in an unsigned integer type variable.\\r\\n    uint256 public totalsupplytokens = 1000000;\\r\\n     \\r\\n    // An address type variable is used to store ethereum accounts taken from Ownable.sol\\r\\n   // address public owner;\\r\\n\\r\\n    // A mapping is a key/value map. Here we store each account balance.\\r\\n    // We store values that can be easy to have when we want to index values\\r\\n    mapping(address => uint256) balances;\\r\\n    mapping(address => mapping(bytes32 => bool)) playeringamecheck;\\r\\n    mapping(uint => mapping(address => uint)) prev_winning;\\r\\n    mapping(uint => mapping(address => uint)) gamewithplayer;     \\r\\n    mapping(uint => uint) gamesplayed;\\r\\n    mapping(address => address) playersplayed;\\r\\n    mapping(address => bool)paidforgames;\\r\\n       //We set into memory for cheaper access\\r\\n\\r\\n       mapping(uint=>Game) public _games;\\r\\n       mapping(address=>Players)public _playerstore;\\r\\n       mapping(uint=>PlayingGame) public _playinggames;\\r\\n\\r\\n    // We set the object for our tracks\\r\\n   Game  newgame;\\r\\n   Players  newplayerregistered;\\r\\n   PlayingGame  playerinthegame;\\r\\n    \\r\\n\\r\\n    // We push into storage \\r\\n    Game[] public gamesregistered;\\r\\n    Players[] public playersregistered;\\r\\n   PlayingGame[] public gameinplay;\\r\\n     \\r\\n    /**npn\\r\\n     * Contract initialization.\\r\\n     *\\r\\n     * The `constructor` is executed only once when the contract is created.\\r\\n     */\\r\\n\\r\\n\\r\\n      // modifier to check if caller is owner\\r\\n      \\r\\n      constructor(address __owner) ERC20(_tokenname, _tokensymbol ) {\\r\\n        _owner =__owner;\\r\\n        \\r\\n         totalSupply();\\r\\n         \\r\\n\\r\\n    }\\r\\n/*\\r\\n    modifier isOwner() {\\r\\n        // If the first argument of 'require' evaluates to 'false', execution terminates and all\\r\\n        // changes to the state and to Ether balances are reverted.\\r\\n        // This used to consume all gas in old EVM versions, but not anymore.\\r\\n        // It is often a good idea to use 'require' to check if functions are called correctly.\\r\\n        // As a second argument, you can also provide an explanation about what went wrong.\\r\\n        require(msg.sender == _owner , \\\"Caller is not owner\\\");\\r\\n      \\r\\n    }\\r\\n  */  \\r\\n    /**\\r\\n     * A function to transfer tokens.\\r\\n     *\\r\\n     * The `external` modifier makes a function *only* callable from outside\\r\\n     * the contract.\\r\\n     */\\r\\n\\r\\nfunction payfee(address payable sender, address payable owneraddress, uint256 amount) external payable returns(bool, bytes memory){\\r\\n              // Call returns a boolean value indicating success or failure.\\r\\n        // This is the current recommended method to use.\\r\\n         _owner =owneraddress;\\r\\n        _payfee = amount;\\r\\n     \\r\\n        require ( amount >= 10, \\\"Amount not enough to play!\\\");\\r\\n       // (bool sent, bytes memory data) = msg.sender.call{value: _payfee}(\\\"\\\");\\r\\n     //   require(sent, \\\"Failed to send Ether\\\");\\r\\n\\r\\n          (bool success,bytes memory data ) = _owner.call{value: _payfee}(\\\"\\\");\\r\\n            require(success, \\\"Check the amount sent as well\\\"); \\r\\n             paidforgames[sender]= true;\\r\\n    return (success,data);\\r\\n    }\\r\\n    function registerplayername(string memory _playername, address payable _playeraddress) external  returns(string memory, address){\\r\\n         \\r\\n              require(msg.sender == _owner , \\\"Caller is not owner\\\");\\r\\n         \\r\\n               if (paidforgames[_playeraddress] == true){\\r\\n            uint256 playerbalance =0;\\r\\n            playerbalance = balanceOf(_playeraddress);\\r\\n\\r\\n           if(playersplayed[_playeraddress] != _playeraddress){\\r\\n             //for player who has ever played before\\r\\n            playersplayed[_playeraddress] =_playeraddress ;\\r\\n            // for registered player\\r\\n\\r\\n                // Storing to memory\\r\\n            newplayerregistered = Players(_playeraddress,_playername, 0,playerbalance ); \\r\\n             _playerstore[_playeraddress].playeraddress = _playeraddress;\\r\\n             _playerstore[_playeraddress].playername = _playername;\\r\\n             _playerstore[_playeraddress].playerscore = 0;\\r\\n             _playerstore[_playeraddress].playerbalance = playerbalance;\\r\\n               \\r\\n                \\r\\n                // Storing to storage\\r\\n            playersregistered.push(newplayerregistered);                        \\r\\n\\r\\n            return (_playername,_playeraddress );\\r\\n     \\r\\n}\\r\\n}\\r\\n    }\\r\\n\\r\\n    \\r\\n\\r\\n    function registergame(uint _gameid) external  returns(uint){\\r\\n                uint256 i =0;\\r\\n                i++;\\r\\n           require(msg.sender == _owner , \\\"Caller is not owner\\\");\\r\\n    \\r\\n             uint256 gamecount = 0;\\r\\n         \\r\\n            if(gamesplayed[_gameid] != _gameid){\\r\\n           \\r\\n             gamesplayed[_gameid] = _gameid;\\r\\n              newgame = Game(_gameid,gamecount );\\r\\n\\r\\n              // Store into memory \\r\\n                _games[_gameid].gameid = _gameid;\\r\\n                _games[_gameid].gamecount = i;\\r\\n                \\r\\n             \\r\\n              gamesregistered.push(newgame);\\r\\n              return (_gameid);\\r\\n             }\\r\\n         \\r\\n    }\\r\\n\\r\\n\\r\\n// function -check if registered\\r\\n// function -check if game is registered\\r\\n        \\r\\n            \\r\\n\\r\\n        //stakeawards\\r\\n        //add to previous winnings\\r\\n    function setplayinggame(uint _gameid, address payable playersaddress) internal returns(uint, address) {\\r\\n           uint _playerscount =0;\\r\\n           _playerscount++;\\r\\n             //Game receipt\\r\\n          // increase nonce\\r\\n       require(msg.sender == _owner , \\\"Caller is not owner\\\");\\r\\n         uint __gameid =0;\\r\\n         __gameid = _gameid;\\r\\n         randNonce; \\r\\n         modulus= 100;\\r\\n        __gameid = uint(keccak256(abi.encodePacked(block.timestamp,\\r\\n                                          msg.sender,\\r\\n                                          randNonce))) % \\r\\n                                          modulus; \\r\\n         require(msg.sender == _owner, \\\"Caller is not owner\\\");\\r\\n         \\r\\n        // The list of players must be less than two\\r\\n         require( _playinggames[_gameid].playerscount < 2 == true, \\\"Only two players can play\\\");       \\r\\n         require(gamewithplayer[_gameid][playersaddress] != __gameid, \\\"Player already is set in game\\\");      \\r\\n        \\r\\n          gamewithplayer[_gameid][playersaddress] = __gameid;\\r\\n          uint _duration = block.number + maxWaitTime;\\r\\n         playerinthegame = PlayingGame(_gameid, playersaddress, false, 0,0, _duration);\\r\\n        \\r\\n         // Setting into memory          \\r\\n               \\r\\n         _playinggames[_gameid].playinggameid = _gameid;\\r\\n        _playinggames[_gameid].playerininaddress = playersaddress;\\r\\n        _playinggames[_gameid].gameover = false;\\r\\n        _playinggames[_gameid].gamescore = 0;\\r\\n        _playinggames[_gameid].playerscount = _playerscount;\\r\\n        _playinggames[_gameid].duration = _duration;\\r\\n         // Setting into storage\\r\\n         gameinplay.push(playerinthegame);\\r\\n \\r\\n       return(_gameid, playersaddress);  \\r\\n       }\\r\\n\\r\\n    function _checkplayerregistered(address payable _playeraddress) public returns (bool ) {\\r\\n              require(playersplayed[_playeraddress] == _playeraddress );\\r\\n              return(true);\\r\\n        }\\r\\n        function _checkgameregistered(uint _gameid) public returns (bool) {\\r\\n            require(gamesplayed[_gameid]== _gameid);\\r\\n            return(true);\\r\\n        } \\r\\n\\r\\n        function _checkplayeringame(uint  _gameid,address _playeraddress ) public returns (bool){\\r\\n            require( gamewithplayer[_gameid][_playeraddress] == _gameid );\\r\\n             return (true);\\r\\n        }\\r\\n  //Let's play game\\r\\n    function selectRock( ) public virtual  returns(bool)\\r\\n   { \\r\\n     \\r\\n     if (rockchosen){\\r\\n          rockchosen = true;\\r\\n           return (rockchosen); \\r\\n     }else{\\r\\n        rockchosen = false;\\r\\n         return (rockchosen);\\r\\n     }         \\r\\n       \\r\\n     }\\r\\n\\r\\n    function selectPaper() public virtual  returns(bool)\\r\\n     { if (paperchosen){\\r\\n          paperchosen = true; \\r\\n           return (paperchosen);\\r\\n     }else{\\r\\n        paperchosen = false;\\r\\n         return (paperchosen);\\r\\n     }         \\r\\n      \\r\\n     }\\r\\n    function selectScissors(  ) public virtual  returns(bool){\\r\\n     if (scissorschosen){\\r\\n          scissorschosen = true;\\r\\n          return (scissorschosen); \\r\\n     }else{\\r\\n        scissorschosen = false;\\r\\n        return (scissorschosen);\\r\\n     }         \\r\\n       \\r\\n     }\\r\\n\\r\\n    function stakeprevwinnings( ) public virtual  returns(bool) {\\r\\n         if(setprevwinnings) {\\r\\n           setprevwinnings =true;\\r\\n         }else{\\r\\n           setprevwinnings =false;\\r\\n         }\\r\\n    \\r\\n   \\r\\n    return (setprevwinnings);\\r\\n    }\\r\\n \\r\\n   function choosegametostake(uint game_id,address payable _playeraddress ) public virtual   returns(uint256){\\r\\n    prev_gamestaked =game_id;\\r\\n     if (stakeprevwinnings( ) ==true ){\\r\\n      uint256 winnings =0;\\r\\n     winnings  =    prev_winning[prev_gamestaked][_playeraddress];\\r\\n     transfer(_owner, winnings);\\r\\n     return( winnings);\\r\\n    }\\r\\n    }\\r\\n    /*\\r\\n    function compare(string memory choicemade, string memory chosenactmade) public returns(bool){\\r\\n        require (choicemade =chosenactmade, \\\"You did not win!\\\");\\r\\n        return (true);\\r\\n    \\r\\n    }\\r\\n    */\\r\\n    \\r\\n   event eventplaygame(uint  _eventgameid, address payable _eventtheplayeraddress, string   _eventchoicemade);\\r\\n   \\r\\n   function playgame(uint _gameid, address payable _theplayeraddress, string memory _choicemade ) internal returns(string memory, address, string memory){\\r\\n       \\r\\n       // Access Controls\\r\\n       require(msg.sender == _owner , \\\"Caller is not owner\\\");\\r\\n       _checkplayerregistered(_theplayeraddress);\\r\\n       _checkgameregistered( _gameid);\\r\\n       _checkplayeringame( _gameid ,_theplayeraddress ); \\r\\n       choosegametostake(prev_gamestaked, _theplayeraddress );\\r\\n       \\r\\n       for (uint i=0; i<2; i++){  \\r\\n        \\r\\n           choicemade = _choicemade;\\r\\n            if (selectRock() == true ){\\r\\n               scissorschosen = false;\\r\\n                paperchosen = false;\\r\\n          \\r\\n             choicemade = \\\"rock\\\" ;\\r\\n             }\\r\\n           if (selectPaper()== true ){\\r\\n              rockchosen = false;\\r\\n              scissorschosen = false;\\r\\n           \\r\\n             choicemade = \\\"paper\\\" ;\\r\\n             }\\r\\n             \\r\\n            if (selectScissors()== true ){\\r\\n            rockchosen =false;\\r\\n           paperchosen =false;\\r\\n             choicemade = \\\"scissors\\\" ;\\r\\n             }\\r\\n             continue; \\r\\n\\r\\n           \\r\\n\\r\\n   string[] memory choices;\\r\\n     choices[0] =\\\"rock\\\";\\r\\n     choices[1]=\\\"paper\\\";\\r\\n     choices[2]=\\\"scissors\\\";\\r\\n        // We create a random number generator for the values to be able to pick from\\r\\n        \\r\\n        uint shuffler = 0;\\r\\n        shuffler= 3;\\r\\n        uint _gameindex = 0;\\r\\n         randNonce++; \\r\\n        _gameindex =   uint(keccak256(abi.encodePacked(block.timestamp,\\r\\n                                          msg.sender,\\r\\n                                          randNonce))) % \\r\\n                                          shuffler; \\r\\n      \\r\\n    string memory choice = choices[_gameindex];  \\r\\n    //  const choice = Math.floor(Math.random() * choices.length);\\r\\n   // const choice = safemath.mod(choices, choices.length)\\r\\n      \\r\\n    if (StringUtils.equal(choicemade, choice)== true ){\\r\\n     \\r\\n        approve( _theplayeraddress, 10000);\\r\\n        transfer(_theplayeraddress,10000);\\r\\n        // _owner.transfer(_theplayeraddress,10000);\\r\\n          balanceOf(_theplayeraddress);\\r\\n          newplayerregistered.playeraddress =_theplayeraddress;\\r\\n       prev_winning[_gameid][_theplayeraddress] =10000; \\r\\n\\r\\n     \\r\\n       _playerstore[_theplayeraddress].playerscore +=5;  \\r\\n    }        \\r\\n  \\r\\n  emit eventplaygame( _gameid, _theplayeraddress,  _choicemade);\\r\\n    }\\r\\n    \\r\\n    }\\r\\n     \\r\\n     function totalSupply() public view virtual override  returns (uint256) {\\r\\n        return totalsupplytokens;\\r\\n    }\\r\\n   \\r\\n function balanceOf(address account) public view override  returns (uint256) {\\r\\n        return balances[account];\\r\\n    }\\r\\n  \\r\\n function owner() public view virtual override returns (address) {\\r\\n        return _owner;\\r\\n    }\\r\\n\\r\\nfunction mint (address account, uint256 amount) external   virtual  returns (address, uint ) {\\r\\n      _mint( msg.sender,  amount);\\r\\n return(  account,  amount);\\r\\n}\\r\\n\\r\\nfunction burn (address account, uint256 amount) external   virtual returns (address, uint ) {\\r\\n      _burn( msg.sender ,  amount);\\r\\n return(  account,  amount);\\r\\n}\\r\\n\\r\\n\\r\\n}\",\"keccak256\":\"0xf5fe3b06e41a1283583407308dc68818474da1a33ed9d5c5a182fc6e3f9adb9b\"},\"contracts/libraries/StringUtils.sol\":{\"content\":\"library StringUtils {\\r\\n    /// @dev Does a byte-by-byte lexicographical comparison of two strings.\\r\\n    /// @return a negative number if `_a` is smaller, zero if they are equal\\r\\n    /// and a positive numbe if `_b` is smaller.\\r\\n    function compare(string memory _a, string memory _b) public returns (int) {\\r\\n        bytes memory a = bytes(_a);\\r\\n        bytes memory b = bytes(_b);\\r\\n        uint minLength = a.length;\\r\\n        if (b.length < minLength) minLength = b.length;\\r\\n        //@todo unroll the loop into increments of 32 and do full 32 byte comparisons\\r\\n        for (uint i = 0; i < minLength; i ++)\\r\\n            if (a[i] < b[i])\\r\\n                return -1;\\r\\n            else if (a[i] > b[i])\\r\\n                return 1;\\r\\n        if (a.length < b.length)\\r\\n            return -1;\\r\\n        else if (a.length > b.length)\\r\\n            return 1;\\r\\n        else\\r\\n            return 0;\\r\\n    }\\r\\n    /// @dev Compares two strings and returns true iff they are equal.\\r\\n    function equal(string memory _a, string memory _b) public returns (bool) {\\r\\n        return compare(_a, _b) == 0;\\r\\n    }\\r\\n    /// @dev Finds the index of the first occurrence of _needle in _haystack\\r\\n    function indexOf(string memory _haystack, string memory _needle) public returns (int)\\r\\n    {\\r\\n    \\tbytes memory h = bytes(_haystack);\\r\\n    \\tbytes memory n = bytes(_needle);\\r\\n    \\tif(h.length < 1 || n.length < 1 || (n.length > h.length)) \\r\\n    \\t\\treturn -1;\\r\\n    \\telse if(h.length > (2**128 -1)) // since we have to be able to return -1 (if the char isn't found or input error), this function must return an \\\"int\\\" type with a max length of (2^128 - 1)\\r\\n    \\t\\treturn -1;\\t\\t\\t\\t\\t\\t\\t\\t\\t\\r\\n    \\telse\\r\\n    \\t{\\r\\n    \\t\\tuint subindex = 0;\\r\\n    \\t\\tfor (uint i = 0; i < h.length; i ++)\\r\\n    \\t\\t{\\r\\n    \\t\\t\\tif (h[i] == n[0]) // found the first char of b\\r\\n    \\t\\t\\t{\\r\\n    \\t\\t\\t\\tsubindex = 1;\\r\\n    \\t\\t\\t\\twhile(subindex < n.length && (i + subindex) < h.length && h[i + subindex] == n[subindex]) // search until the chars don't match or until we reach the end of a or b\\r\\n    \\t\\t\\t\\t{\\r\\n    \\t\\t\\t\\t\\tsubindex++;\\r\\n    \\t\\t\\t\\t}\\t\\r\\n    \\t\\t\\t\\tif(subindex == n.length)\\r\\n    \\t\\t\\t\\t\\treturn int(i);\\r\\n    \\t\\t\\t}\\r\\n    \\t\\t}\\r\\n    \\t\\treturn -1;\\r\\n    \\t}\\t\\r\\n    }\\r\\n}\",\"keccak256\":\"0xde12758f08b70762dacceafcab985517885d4a9340806d334ec0fc80d418d3f0\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x60806040526004361061020f5760003560e01c80638da5cb5b11610118578063b2bdfa7b116100a0578063d6452b1f1161006f578063d6452b1f14610893578063da92cae4146108d0578063dd62ed3e1461090e578063f2fde38b1461094b578063f67ce9f3146109745761020f565b8063b2bdfa7b146107bb578063c6de1b4b146107e6578063c93aef0614610826578063d5d2441a146108685761020f565b8063a0f5c275116100e7578063a0f5c2751461069b578063a33a48d6146106d9578063a457c2d714610704578063a9059cbb14610741578063a9d5642a1461077e5761020f565b80638da5cb5b146105ca57806391af152c146105f557806395d89b41146106325780639dc29fac1461065d5761020f565b806340ba937b1161019b57806357e03abb1161016a57806357e03abb146104ce5780636d1da1911461050b57806370a0823114610536578063715018a6146105735780638ac3c0141461058a5761020f565b806340ba937b146103ea57806340c10f191461042757806341eb8b8b1461046557806355cf3251146104a35761020f565b806322a40da3116101e257806322a40da3146102e957806323b872dd1461031a578063313ce567146103575780633933de8a1461038257806339509351146103ad5761020f565b806306fdde0314610214578063095ea7b31461023f578063177dc57a1461027c57806318160ddd146102be575b600080fd5b34801561022057600080fd5b5061022961099f565b6040516102369190613008565b60405180910390f35b34801561024b57600080fd5b5061026660048036038101906102619190612afa565b610a31565b6040516102739190612fbd565b60405180910390f35b34801561028857600080fd5b506102a3600480360381019061029e9190612b8a565b610a4f565b6040516102b596959493929190613255565b60405180910390f35b3480156102ca57600080fd5b506102d3610ac8565b6040516102e0919061323a565b60405180910390f35b61030360048036038101906102fe9190612a20565b610ad2565b604051610311929190612fd8565b60405180910390f35b34801561032657600080fd5b50610341600480360381019061033c9190612aab565b610c9c565b60405161034e9190612fbd565b60405180910390f35b34801561036357600080fd5b5061036c610d94565b60405161037991906132df565b60405180910390f35b34801561038e57600080fd5b50610397610d9d565b6040516103a49190612fbd565b60405180910390f35b3480156103b957600080fd5b506103d460048036038101906103cf9190612afa565b610e17565b6040516103e19190612fbd565b60405180910390f35b3480156103f657600080fd5b50610411600480360381019061040c9190612b8a565b610ec3565b60405161041e919061323a565b60405180910390f35b34801561043357600080fd5b5061044e60048036038101906104499190612afa565b611055565b60405161045c929190612f94565b60405180910390f35b34801561047157600080fd5b5061048c60048036038101906104879190612b8a565b61106f565b60405161049a9291906132b6565b60405180910390f35b3480156104af57600080fd5b506104b8611093565b6040516104c5919061323a565b60405180910390f35b3480156104da57600080fd5b506104f560048036038101906104f09190612bb3565b611099565b6040516105029190612fbd565b60405180910390f35b34801561051757600080fd5b50610520611101565b60405161052d9190612fbd565b60405180910390f35b34801561054257600080fd5b5061055d600480360381019061055891906129ce565b611169565b60405161056a919061323a565b60405180910390f35b34801561057f57600080fd5b506105886111b2565b005b34801561059657600080fd5b506105b160048036038101906105ac91906129ce565b61123a565b6040516105c19493929190612f48565b60405180910390f35b3480156105d657600080fd5b506105df611312565b6040516105ec9190612f2d565b60405180910390f35b34801561060157600080fd5b5061061c60048036038101906106179190612b8a565b61133c565b6040516106299190612fbd565b60405180910390f35b34801561063e57600080fd5b50610647611366565b6040516106549190613008565b60405180910390f35b34801561066957600080fd5b50610684600480360381019061067f9190612afa565b6113f8565b604051610692929190612f94565b60405180910390f35b3480156106a757600080fd5b506106c260048036038101906106bd9190612b8a565b611412565b6040516106d09291906132b6565b60405180910390f35b3480156106e557600080fd5b506106ee611446565b6040516106fb919061323a565b60405180910390f35b34801561071057600080fd5b5061072b60048036038101906107269190612afa565b61144c565b6040516107389190612fbd565b60405180910390f35b34801561074d57600080fd5b5061076860048036038101906107639190612afa565b611537565b6040516107759190612fbd565b60405180910390f35b34801561078a57600080fd5b506107a560048036038101906107a091906129f7565b611555565b6040516107b29190612fbd565b60405180910390f35b3480156107c757600080fd5b506107d06115f7565b6040516107dd9190612f2d565b60405180910390f35b3480156107f257600080fd5b5061080d60048036038101906108089190612b8a565b61161d565b60405161081d9493929190612f48565b60405180910390f35b34801561083257600080fd5b5061084d60048036038101906108489190612b8a565b611705565b60405161085f96959493929190613255565b60405180910390f35b34801561087457600080fd5b5061087d61176e565b60405161088a9190612fbd565b60405180910390f35b34801561089f57600080fd5b506108ba60048036038101906108b59190612bef565b6117e8565b6040516108c7919061323a565b60405180910390f35b3480156108dc57600080fd5b506108f760048036038101906108f29190612b36565b611899565b60405161090592919061302a565b60405180910390f35b34801561091a57600080fd5b5061093560048036038101906109309190612a6f565b611d9f565b604051610942919061323a565b60405180910390f35b34801561095757600080fd5b50610972600480360381019061096d91906129ce565b611e26565b005b34801561098057600080fd5b50610989611f1e565b6040516109969190612fbd565b60405180910390f35b6060600480546109ae906134c6565b80601f01602080910402602001604051908101604052809291908181526020018280546109da906134c6565b8015610a275780601f106109fc57610100808354040283529160200191610a27565b820191906000526020600020905b815481529060010190602001808311610a0a57829003601f168201915b5050505050905090565b6000610a45610a3e611f98565b8484611fa0565b6001905092915050565b60298181548110610a5f57600080fd5b90600052602060002090600502016000915090508060000154908060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060010160149054906101000a900460ff16908060020154908060030154908060040154905086565b6000601154905090565b6000606083600c60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555082600f81905550600a831015610b62576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b599061313a565b60405180910390fd5b600080600c60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16600f54604051610bad90612f18565b60006040518083038185875af1925050503d8060008114610bea576040519150601f19603f3d011682016040523d82523d6000602084013e610bef565b606091505b509150915081610c34576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c2b9061309a565b60405180910390fd5b6001601860008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508181935093505050935093915050565b6000610ca984848461216b565b6000600260008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000610cf4611f98565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905082811015610d74576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d6b9061315a565b60405180910390fd5b610d8885610d80611f98565b858403611fa0565b60019150509392505050565b60006012905090565b6000600660019054906101000a900460ff1615610de6576001600660016101000a81548160ff021916908315150217905550600660019054906101000a900460ff169050610e14565b6000600660016101000a81548160ff021916908315150217905550600660019054906101000a900460ff1690505b90565b6000610eb9610e24611f98565b848460026000610e32611f98565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054610eb49190613393565b611fa0565b6001905092915050565b600080600090508080610ed590613529565b915050600c60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610f68576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f5f906130fa565b60405180910390fd5b60008360166000868152602001908152602001600020541461104d57836016600086815260200190815260200160002081905550604051806040016040528085815260200182815250601c60008201518160000155602082015181600101559050508360196000868152602001908152602001600020600001819055508160196000868152602001908152602001600020600101819055506027601c9080600181540180825580915050600190039060005260206000209060020201600090919091909150600082015481600001556001820154816001015550508392505050611050565b50505b919050565b60008061106233846123ef565b8383915091509250929050565b60196020528060005260406000206000915090508060000154908060010154905082565b60095481565b6000826015600085815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054146110f757600080fd5b6001905092915050565b6000600860009054906101000a900460ff1615611138576001600860006101000a81548160ff021916908315150217905550611154565b6000600860006101000a81548160ff0219169083151502179055505b600860009054906101000a900460ff16905090565b6000601260008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b6111ba611f98565b73ffffffffffffffffffffffffffffffffffffffff166111d8611312565b73ffffffffffffffffffffffffffffffffffffffff161461122e576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016112259061317a565b60405180910390fd5b6112386000612550565b565b601a6020528060005260406000206000915090508060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690806001018054611283906134c6565b80601f01602080910402602001604051908101604052809291908181526020018280546112af906134c6565b80156112fc5780601f106112d1576101008083540402835291602001916112fc565b820191906000526020600020905b8154815290600101906020018083116112df57829003601f168201915b5050505050908060020154908060030154905084565b6000600c60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b60008160166000848152602001908152602001600020541461135d57600080fd5b60019050919050565b606060058054611375906134c6565b80601f01602080910402602001604051908101604052809291908181526020018280546113a1906134c6565b80156113ee5780601f106113c3576101008083540402835291602001916113ee565b820191906000526020600020905b8154815290600101906020018083116113d157829003601f168201915b5050505050905090565b6000806114053384612614565b8383915091509250929050565b6027818154811061142257600080fd5b90600052602060002090600202016000915090508060000154908060010154905082565b60115481565b6000806002600061145b611f98565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905082811015611518576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161150f906131fa565b60405180910390fd5b61152c611523611f98565b85858403611fa0565b600191505092915050565b600061154b611544611f98565b848461216b565b6001905092915050565b60008173ffffffffffffffffffffffffffffffffffffffff16601760008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16146115ee57600080fd5b60019050919050565b600c60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6028818154811061162d57600080fd5b90600052602060002090600402016000915090508060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690806001018054611676906134c6565b80601f01602080910402602001604051908101604052809291908181526020018280546116a2906134c6565b80156116ef5780601f106116c4576101008083540402835291602001916116ef565b820191906000526020600020905b8154815290600101906020018083116116d257829003601f168201915b5050505050908060020154908060030154905084565b601b6020528060005260406000206000915090508060000154908060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060010160149054906101000a900460ff16908060020154908060030154908060040154905086565b6000600660009054906101000a900460ff16156117b7576001600660006101000a81548160ff021916908315150217905550600660009054906101000a900460ff1690506117e5565b6000600660006101000a81548160ff021916908315150217905550600660009054906101000a900460ff1690505b90565b600082600981905550600115156117fd611101565b1515141561189257600060146000600954815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050611888600c60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1682611537565b5080915050611893565b5b92915050565b60606000600c60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461192d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611924906130fa565b60405180910390fd5b60011515601860008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1615151415611d9757600061199184611169565b90508373ffffffffffffffffffffffffffffffffffffffff16601760008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614611d955783601760008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060405180608001604052808573ffffffffffffffffffffffffffffffffffffffff1681526020018681526020016000815260200182815250601e60008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506020820151816001019080519060200190611b409291906127f7565b50604082015181600201556060820151816003015590505083601a60008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555084601a60008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206001019080519060200190611c2f9291906127f7565b506000601a60008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206002018190555080601a60008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600301819055506028601e90806001815401808255809150506001900390600052602060002090600402016000909190919091506000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff168160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506001820181600101908054611d67906134c6565b611d7292919061287d565b506002820154816002015560038201548160030155505084849250925050611d98565b505b5b9250929050565b6000600260008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b611e2e611f98565b73ffffffffffffffffffffffffffffffffffffffff16611e4c611312565b73ffffffffffffffffffffffffffffffffffffffff1614611ea2576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611e999061317a565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415611f12576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611f09906130ba565b60405180910390fd5b611f1b81612550565b50565b6000600660029054906101000a900460ff1615611f67576001600660026101000a81548160ff021916908315150217905550600660029054906101000a900460ff169050611f95565b6000600660026101000a81548160ff021916908315150217905550600660029054906101000a900460ff1690505b90565b600033905090565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415612010576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612007906131da565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415612080576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612077906130da565b60405180910390fd5b80600260008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9258360405161215e919061323a565b60405180910390a3505050565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614156121db576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016121d2906131ba565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16141561224b576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016122429061305a565b60405180910390fd5b6122568383836127ed565b6000600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050818110156122dd576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016122d49061311a565b60405180910390fd5b818103600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555081600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546123729190613393565b925050819055508273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040516123d6919061323a565b60405180910390a36123e98484846127f2565b50505050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16141561245f576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016124569061321a565b60405180910390fd5b61246b600083836127ed565b806003600082825461247d9190613393565b9250508190555080600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546124d39190613393565b925050819055508173ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef83604051612538919061323a565b60405180910390a361254c600083836127f2565b5050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415612684576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161267b9061319a565b60405180910390fd5b612690826000836127ed565b6000600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905081811015612717576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161270e9061307a565b60405180910390fd5b818103600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550816003600082825461276f91906133e9565b92505081905550600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040516127d4919061323a565b60405180910390a36127e8836000846127f2565b505050565b505050565b505050565b828054612803906134c6565b90600052602060002090601f016020900481019282612825576000855561286c565b82601f1061283e57805160ff191683800117855561286c565b8280016001018555821561286c579182015b8281111561286b578251825591602001919060010190612850565b5b509050612879919061290a565b5090565b828054612889906134c6565b90600052602060002090601f0160209004810192826128ab57600085556128f9565b82601f106128bc57805485556128f9565b828001600101855582156128f957600052602060002091601f016020900482015b828111156128f85782548255916001019190600101906128dd565b5b509050612906919061290a565b5090565b5b8082111561292357600081600090555060010161290b565b5090565b600061293a6129358461331f565b6132fa565b90508281526020810184848401111561295257600080fd5b61295d848285613484565b509392505050565b600081359050612974816139f6565b92915050565b60008135905061298981613a0d565b92915050565b600082601f8301126129a057600080fd5b81356129b0848260208601612927565b91505092915050565b6000813590506129c881613a24565b92915050565b6000602082840312156129e057600080fd5b60006129ee84828501612965565b91505092915050565b600060208284031215612a0957600080fd5b6000612a178482850161297a565b91505092915050565b600080600060608486031215612a3557600080fd5b6000612a438682870161297a565b9350506020612a548682870161297a565b9250506040612a65868287016129b9565b9150509250925092565b60008060408385031215612a8257600080fd5b6000612a9085828601612965565b9250506020612aa185828601612965565b9150509250929050565b600080600060608486031215612ac057600080fd5b6000612ace86828701612965565b9350506020612adf86828701612965565b9250506040612af0868287016129b9565b9150509250925092565b60008060408385031215612b0d57600080fd5b6000612b1b85828601612965565b9250506020612b2c858286016129b9565b9150509250929050565b60008060408385031215612b4957600080fd5b600083013567ffffffffffffffff811115612b6357600080fd5b612b6f8582860161298f565b9250506020612b808582860161297a565b9150509250929050565b600060208284031215612b9c57600080fd5b6000612baa848285016129b9565b91505092915050565b60008060408385031215612bc657600080fd5b6000612bd4858286016129b9565b9250506020612be585828601612965565b9150509250929050565b60008060408385031215612c0257600080fd5b6000612c10858286016129b9565b9250506020612c218582860161297a565b9150509250929050565b612c348161342f565b82525050565b612c438161341d565b82525050565b612c5281613441565b82525050565b6000612c6382613350565b612c6d8185613366565b9350612c7d818560208601613493565b612c86816135ff565b840191505092915050565b6000612c9c8261335b565b612ca68185613382565b9350612cb6818560208601613493565b612cbf816135ff565b840191505092915050565b6000612cd7602383613382565b9150612ce282613610565b604082019050919050565b6000612cfa602283613382565b9150612d058261365f565b604082019050919050565b6000612d1d601d83613382565b9150612d28826136ae565b602082019050919050565b6000612d40602683613382565b9150612d4b826136d7565b604082019050919050565b6000612d63602283613382565b9150612d6e82613726565b604082019050919050565b6000612d86601383613382565b9150612d9182613775565b602082019050919050565b6000612da9602683613382565b9150612db48261379e565b604082019050919050565b6000612dcc601a83613382565b9150612dd7826137ed565b602082019050919050565b6000612def602883613382565b9150612dfa82613816565b604082019050919050565b6000612e12602083613382565b9150612e1d82613865565b602082019050919050565b6000612e35602183613382565b9150612e408261388e565b604082019050919050565b6000612e58602583613382565b9150612e63826138dd565b604082019050919050565b6000612e7b600083613377565b9150612e868261392c565b600082019050919050565b6000612e9e602483613382565b9150612ea98261392f565b604082019050919050565b6000612ec1602583613382565b9150612ecc8261397e565b604082019050919050565b6000612ee4601f83613382565b9150612eef826139cd565b602082019050919050565b612f038161346d565b82525050565b612f1281613477565b82525050565b6000612f2382612e6e565b9150819050919050565b6000602082019050612f426000830184612c3a565b92915050565b6000608082019050612f5d6000830187612c2b565b8181036020830152612f6f8186612c91565b9050612f7e6040830185612efa565b612f8b6060830184612efa565b95945050505050565b6000604082019050612fa96000830185612c3a565b612fb66020830184612efa565b9392505050565b6000602082019050612fd26000830184612c49565b92915050565b6000604082019050612fed6000830185612c49565b8181036020830152612fff8184612c58565b90509392505050565b600060208201905081810360008301526130228184612c91565b905092915050565b600060408201905081810360008301526130448185612c91565b90506130536020830184612c3a565b9392505050565b6000602082019050818103600083015261307381612cca565b9050919050565b6000602082019050818103600083015261309381612ced565b9050919050565b600060208201905081810360008301526130b381612d10565b9050919050565b600060208201905081810360008301526130d381612d33565b9050919050565b600060208201905081810360008301526130f381612d56565b9050919050565b6000602082019050818103600083015261311381612d79565b9050919050565b6000602082019050818103600083015261313381612d9c565b9050919050565b6000602082019050818103600083015261315381612dbf565b9050919050565b6000602082019050818103600083015261317381612de2565b9050919050565b6000602082019050818103600083015261319381612e05565b9050919050565b600060208201905081810360008301526131b381612e28565b9050919050565b600060208201905081810360008301526131d381612e4b565b9050919050565b600060208201905081810360008301526131f381612e91565b9050919050565b6000602082019050818103600083015261321381612eb4565b9050919050565b6000602082019050818103600083015261323381612ed7565b9050919050565b600060208201905061324f6000830184612efa565b92915050565b600060c08201905061326a6000830189612efa565b6132776020830188612c2b565b6132846040830187612c49565b6132916060830186612efa565b61329e6080830185612efa565b6132ab60a0830184612efa565b979650505050505050565b60006040820190506132cb6000830185612efa565b6132d86020830184612efa565b9392505050565b60006020820190506132f46000830184612f09565b92915050565b6000613304613315565b905061331082826134f8565b919050565b6000604051905090565b600067ffffffffffffffff82111561333a576133396135d0565b5b613343826135ff565b9050602081019050919050565b600081519050919050565b600081519050919050565b600082825260208201905092915050565b600081905092915050565b600082825260208201905092915050565b600061339e8261346d565b91506133a98361346d565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff038211156133de576133dd613572565b5b828201905092915050565b60006133f48261346d565b91506133ff8361346d565b92508282101561341257613411613572565b5b828203905092915050565b60006134288261344d565b9050919050565b600061343a8261344d565b9050919050565b60008115159050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600060ff82169050919050565b82818337600083830152505050565b60005b838110156134b1578082015181840152602081019050613496565b838111156134c0576000848401525b50505050565b600060028204905060018216806134de57607f821691505b602082108114156134f2576134f16135a1565b5b50919050565b613501826135ff565b810181811067ffffffffffffffff821117156135205761351f6135d0565b5b80604052505050565b60006135348261346d565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82141561356757613566613572565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6000601f19601f8301169050919050565b7f45524332303a207472616e7366657220746f20746865207a65726f206164647260008201527f6573730000000000000000000000000000000000000000000000000000000000602082015250565b7f45524332303a206275726e20616d6f756e7420657863656564732062616c616e60008201527f6365000000000000000000000000000000000000000000000000000000000000602082015250565b7f436865636b2074686520616d6f756e742073656e742061732077656c6c000000600082015250565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b7f45524332303a20617070726f766520746f20746865207a65726f20616464726560008201527f7373000000000000000000000000000000000000000000000000000000000000602082015250565b7f43616c6c6572206973206e6f74206f776e657200000000000000000000000000600082015250565b7f45524332303a207472616e7366657220616d6f756e742065786365656473206260008201527f616c616e63650000000000000000000000000000000000000000000000000000602082015250565b7f416d6f756e74206e6f7420656e6f75676820746f20706c617921000000000000600082015250565b7f45524332303a207472616e7366657220616d6f756e742065786365656473206160008201527f6c6c6f77616e6365000000000000000000000000000000000000000000000000602082015250565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b7f45524332303a206275726e2066726f6d20746865207a65726f2061646472657360008201527f7300000000000000000000000000000000000000000000000000000000000000602082015250565b7f45524332303a207472616e736665722066726f6d20746865207a65726f20616460008201527f6472657373000000000000000000000000000000000000000000000000000000602082015250565b50565b7f45524332303a20617070726f76652066726f6d20746865207a65726f2061646460008201527f7265737300000000000000000000000000000000000000000000000000000000602082015250565b7f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f7760008201527f207a65726f000000000000000000000000000000000000000000000000000000602082015250565b7f45524332303a206d696e7420746f20746865207a65726f206164647265737300600082015250565b6139ff8161341d565b8114613a0a57600080fd5b50565b613a168161342f565b8114613a2157600080fd5b50565b613a2d8161346d565b8114613a3857600080fd5b5056fea264697066735822122061c28dbdc7f717c53c152cdc83bcd464de61c954ef9848aa0fac0aa29abb3f4264736f6c63430008020033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "allowance(address,address)": {
        "details": "See {IERC20-allowance}."
      },
      "approve(address,uint256)": {
        "details": "See {IERC20-approve}. Requirements: - `spender` cannot be the zero address."
      },
      "balanceOf(address)": {
        "details": "See {IERC20-balanceOf}."
      },
      "decimals()": {
        "details": "Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the value {ERC20} uses, unless this function is overridden; NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}."
      },
      "decreaseAllowance(address,uint256)": {
        "details": "Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`."
      },
      "increaseAllowance(address,uint256)": {
        "details": "Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address."
      },
      "name()": {
        "details": "Returns the name of the token."
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "symbol()": {
        "details": "Returns the symbol of the token, usually a shorter version of the name."
      },
      "totalSupply()": {
        "details": "See {IERC20-totalSupply}."
      },
      "transfer(address,uint256)": {
        "details": "See {IERC20-transfer}. Requirements: - `recipient` cannot be the zero address. - the caller must have a balance of at least `amount`."
      },
      "transferFrom(address,address,uint256)": {
        "details": "See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. Requirements: - `sender` and `recipient` cannot be the zero address. - `sender` must have a balance of at least `amount`. - the caller must have allowance for ``sender``'s tokens of at least `amount`."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "constructor": {
        "notice": "npn Contract initialization. The `constructor` is executed only once when the contract is created."
      },
      "payfee(address,address,uint256)": {
        "notice": "A function to transfer tokens. The `external` modifier makes a function *only* callable from outside the contract."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 7,
        "contract": "contracts/RockPaperScissors.sol:RockPaperScissors",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 119,
        "contract": "contracts/RockPaperScissors.sol:RockPaperScissors",
        "label": "_balances",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 125,
        "contract": "contracts/RockPaperScissors.sol:RockPaperScissors",
        "label": "_allowances",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 127,
        "contract": "contracts/RockPaperScissors.sol:RockPaperScissors",
        "label": "_totalSupply",
        "offset": 0,
        "slot": "3",
        "type": "t_uint256"
      },
      {
        "astId": 129,
        "contract": "contracts/RockPaperScissors.sol:RockPaperScissors",
        "label": "_name",
        "offset": 0,
        "slot": "4",
        "type": "t_string_storage"
      },
      {
        "astId": 131,
        "contract": "contracts/RockPaperScissors.sol:RockPaperScissors",
        "label": "_symbol",
        "offset": 0,
        "slot": "5",
        "type": "t_string_storage"
      },
      {
        "astId": 796,
        "contract": "contracts/RockPaperScissors.sol:RockPaperScissors",
        "label": "rockchosen",
        "offset": 0,
        "slot": "6",
        "type": "t_bool"
      },
      {
        "astId": 799,
        "contract": "contracts/RockPaperScissors.sol:RockPaperScissors",
        "label": "scissorschosen",
        "offset": 1,
        "slot": "6",
        "type": "t_bool"
      },
      {
        "astId": 802,
        "contract": "contracts/RockPaperScissors.sol:RockPaperScissors",
        "label": "paperchosen",
        "offset": 2,
        "slot": "6",
        "type": "t_bool"
      },
      {
        "astId": 804,
        "contract": "contracts/RockPaperScissors.sol:RockPaperScissors",
        "label": "choicemade",
        "offset": 0,
        "slot": "7",
        "type": "t_string_storage"
      },
      {
        "astId": 807,
        "contract": "contracts/RockPaperScissors.sol:RockPaperScissors",
        "label": "setprevwinnings",
        "offset": 0,
        "slot": "8",
        "type": "t_bool"
      },
      {
        "astId": 809,
        "contract": "contracts/RockPaperScissors.sol:RockPaperScissors",
        "label": "prev_gamestaked",
        "offset": 0,
        "slot": "9",
        "type": "t_uint256"
      },
      {
        "astId": 812,
        "contract": "contracts/RockPaperScissors.sol:RockPaperScissors",
        "label": "_tokenname",
        "offset": 0,
        "slot": "10",
        "type": "t_string_storage"
      },
      {
        "astId": 815,
        "contract": "contracts/RockPaperScissors.sol:RockPaperScissors",
        "label": "_tokensymbol",
        "offset": 0,
        "slot": "11",
        "type": "t_string_storage"
      },
      {
        "astId": 817,
        "contract": "contracts/RockPaperScissors.sol:RockPaperScissors",
        "label": "_owner",
        "offset": 0,
        "slot": "12",
        "type": "t_address"
      },
      {
        "astId": 820,
        "contract": "contracts/RockPaperScissors.sol:RockPaperScissors",
        "label": "randNonce",
        "offset": 0,
        "slot": "13",
        "type": "t_uint256"
      },
      {
        "astId": 823,
        "contract": "contracts/RockPaperScissors.sol:RockPaperScissors",
        "label": "modulus",
        "offset": 0,
        "slot": "14",
        "type": "t_uint256"
      },
      {
        "astId": 826,
        "contract": "contracts/RockPaperScissors.sol:RockPaperScissors",
        "label": "_payfee",
        "offset": 0,
        "slot": "15",
        "type": "t_uint256"
      },
      {
        "astId": 829,
        "contract": "contracts/RockPaperScissors.sol:RockPaperScissors",
        "label": "maxWaitTime",
        "offset": 0,
        "slot": "16",
        "type": "t_uint256"
      },
      {
        "astId": 859,
        "contract": "contracts/RockPaperScissors.sol:RockPaperScissors",
        "label": "totalsupplytokens",
        "offset": 0,
        "slot": "17",
        "type": "t_uint256"
      },
      {
        "astId": 863,
        "contract": "contracts/RockPaperScissors.sol:RockPaperScissors",
        "label": "balances",
        "offset": 0,
        "slot": "18",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 869,
        "contract": "contracts/RockPaperScissors.sol:RockPaperScissors",
        "label": "playeringamecheck",
        "offset": 0,
        "slot": "19",
        "type": "t_mapping(t_address,t_mapping(t_bytes32,t_bool))"
      },
      {
        "astId": 875,
        "contract": "contracts/RockPaperScissors.sol:RockPaperScissors",
        "label": "prev_winning",
        "offset": 0,
        "slot": "20",
        "type": "t_mapping(t_uint256,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 881,
        "contract": "contracts/RockPaperScissors.sol:RockPaperScissors",
        "label": "gamewithplayer",
        "offset": 0,
        "slot": "21",
        "type": "t_mapping(t_uint256,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 885,
        "contract": "contracts/RockPaperScissors.sol:RockPaperScissors",
        "label": "gamesplayed",
        "offset": 0,
        "slot": "22",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 889,
        "contract": "contracts/RockPaperScissors.sol:RockPaperScissors",
        "label": "playersplayed",
        "offset": 0,
        "slot": "23",
        "type": "t_mapping(t_address,t_address)"
      },
      {
        "astId": 893,
        "contract": "contracts/RockPaperScissors.sol:RockPaperScissors",
        "label": "paidforgames",
        "offset": 0,
        "slot": "24",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 898,
        "contract": "contracts/RockPaperScissors.sol:RockPaperScissors",
        "label": "_games",
        "offset": 0,
        "slot": "25",
        "type": "t_mapping(t_uint256,t_struct(Game)834_storage)"
      },
      {
        "astId": 903,
        "contract": "contracts/RockPaperScissors.sol:RockPaperScissors",
        "label": "_playerstore",
        "offset": 0,
        "slot": "26",
        "type": "t_mapping(t_address,t_struct(Players)843_storage)"
      },
      {
        "astId": 908,
        "contract": "contracts/RockPaperScissors.sol:RockPaperScissors",
        "label": "_playinggames",
        "offset": 0,
        "slot": "27",
        "type": "t_mapping(t_uint256,t_struct(PlayingGame)856_storage)"
      },
      {
        "astId": 911,
        "contract": "contracts/RockPaperScissors.sol:RockPaperScissors",
        "label": "newgame",
        "offset": 0,
        "slot": "28",
        "type": "t_struct(Game)834_storage"
      },
      {
        "astId": 914,
        "contract": "contracts/RockPaperScissors.sol:RockPaperScissors",
        "label": "newplayerregistered",
        "offset": 0,
        "slot": "30",
        "type": "t_struct(Players)843_storage"
      },
      {
        "astId": 917,
        "contract": "contracts/RockPaperScissors.sol:RockPaperScissors",
        "label": "playerinthegame",
        "offset": 0,
        "slot": "34",
        "type": "t_struct(PlayingGame)856_storage"
      },
      {
        "astId": 921,
        "contract": "contracts/RockPaperScissors.sol:RockPaperScissors",
        "label": "gamesregistered",
        "offset": 0,
        "slot": "39",
        "type": "t_array(t_struct(Game)834_storage)dyn_storage"
      },
      {
        "astId": 925,
        "contract": "contracts/RockPaperScissors.sol:RockPaperScissors",
        "label": "playersregistered",
        "offset": 0,
        "slot": "40",
        "type": "t_array(t_struct(Players)843_storage)dyn_storage"
      },
      {
        "astId": 929,
        "contract": "contracts/RockPaperScissors.sol:RockPaperScissors",
        "label": "gameinplay",
        "offset": 0,
        "slot": "41",
        "type": "t_array(t_struct(PlayingGame)856_storage)dyn_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_address_payable": {
        "encoding": "inplace",
        "label": "address payable",
        "numberOfBytes": "20"
      },
      "t_array(t_struct(Game)834_storage)dyn_storage": {
        "base": "t_struct(Game)834_storage",
        "encoding": "dynamic_array",
        "label": "struct RockPaperScissors.Game[]",
        "numberOfBytes": "32"
      },
      "t_array(t_struct(Players)843_storage)dyn_storage": {
        "base": "t_struct(Players)843_storage",
        "encoding": "dynamic_array",
        "label": "struct RockPaperScissors.Players[]",
        "numberOfBytes": "32"
      },
      "t_array(t_struct(PlayingGame)856_storage)dyn_storage": {
        "base": "t_struct(PlayingGame)856_storage",
        "encoding": "dynamic_array",
        "label": "struct RockPaperScissors.PlayingGame[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_address)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_address,t_mapping(t_bytes32,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(bytes32 => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_bytes32,t_bool)"
      },
      "t_mapping(t_address,t_struct(Players)843_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct RockPaperScissors.Players)",
        "numberOfBytes": "32",
        "value": "t_struct(Players)843_storage"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_bytes32,t_bool)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_uint256,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_uint256,t_struct(Game)834_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct RockPaperScissors.Game)",
        "numberOfBytes": "32",
        "value": "t_struct(Game)834_storage"
      },
      "t_mapping(t_uint256,t_struct(PlayingGame)856_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct RockPaperScissors.PlayingGame)",
        "numberOfBytes": "32",
        "value": "t_struct(PlayingGame)856_storage"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(Game)834_storage": {
        "encoding": "inplace",
        "label": "struct RockPaperScissors.Game",
        "members": [
          {
            "astId": 831,
            "contract": "contracts/RockPaperScissors.sol:RockPaperScissors",
            "label": "gameid",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 833,
            "contract": "contracts/RockPaperScissors.sol:RockPaperScissors",
            "label": "gamecount",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Players)843_storage": {
        "encoding": "inplace",
        "label": "struct RockPaperScissors.Players",
        "members": [
          {
            "astId": 836,
            "contract": "contracts/RockPaperScissors.sol:RockPaperScissors",
            "label": "playeraddress",
            "offset": 0,
            "slot": "0",
            "type": "t_address_payable"
          },
          {
            "astId": 838,
            "contract": "contracts/RockPaperScissors.sol:RockPaperScissors",
            "label": "playername",
            "offset": 0,
            "slot": "1",
            "type": "t_string_storage"
          },
          {
            "astId": 840,
            "contract": "contracts/RockPaperScissors.sol:RockPaperScissors",
            "label": "playerscore",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 842,
            "contract": "contracts/RockPaperScissors.sol:RockPaperScissors",
            "label": "playerbalance",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_struct(PlayingGame)856_storage": {
        "encoding": "inplace",
        "label": "struct RockPaperScissors.PlayingGame",
        "members": [
          {
            "astId": 845,
            "contract": "contracts/RockPaperScissors.sol:RockPaperScissors",
            "label": "playinggameid",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 847,
            "contract": "contracts/RockPaperScissors.sol:RockPaperScissors",
            "label": "playerininaddress",
            "offset": 0,
            "slot": "1",
            "type": "t_address_payable"
          },
          {
            "astId": 849,
            "contract": "contracts/RockPaperScissors.sol:RockPaperScissors",
            "label": "gameover",
            "offset": 20,
            "slot": "1",
            "type": "t_bool"
          },
          {
            "astId": 851,
            "contract": "contracts/RockPaperScissors.sol:RockPaperScissors",
            "label": "gamescore",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 853,
            "contract": "contracts/RockPaperScissors.sol:RockPaperScissors",
            "label": "playerscount",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 855,
            "contract": "contracts/RockPaperScissors.sol:RockPaperScissors",
            "label": "duration",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "160"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}