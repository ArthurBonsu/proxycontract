{
  "language": "Solidity",
  "sources": {
    "contracts/Token.sol": {
      "content": "// Solidity files have to start with this pragma.\r\n// It will be used by the Solidity compiler to validate its version.\r\npragma solidity 0.8.2;\r\n\r\n\r\n// This is the main building block for smart contracts.\r\ncontract Token {\r\n    // Some string type variables to identify the token.\r\n    // The `public` modifier makes a variable readable from outside the contract.\r\n    string public name = \"My Hardhat Token\";\r\n    string public symbol = \"MHT\";\r\n\r\n    // The fixed amount of tokens stored in an unsigned integer type variable.\r\n    uint256 public totalSupply = 1000000;\r\n\r\n    // An address type variable is used to store ethereum accounts.\r\n    address public owner;\r\n\r\n    // A mapping is a key/value map. Here we store each account balance.\r\n    mapping(address => uint256) balances;\r\n\r\n    /**\r\n     * Contract initialization.\r\n     *\r\n     * The `constructor` is executed only once when the contract is created.\r\n     */\r\n    constructor() {\r\n        // The totalSupply is assigned to transaction sender, which is the account\r\n        // that is deploying the contract.\r\n        balances[msg.sender] = totalSupply;\r\n        owner = msg.sender;\r\n    }\r\n\r\n    /**\r\n     * A function to transfer tokens.\r\n     *\r\n     * The `external` modifier makes a function *only* callable from outside\r\n     * the contract.\r\n     */\r\n    function transfer(address to, uint256 amount) external {\r\n        // Check if the transaction sender has enough tokens.\r\n        // If `require`'s first argument evaluates to `false` then the\r\n        // transaction will revert.\r\n        require(balances[msg.sender] >= amount, \"Not enough tokens\");\r\n\r\n        // Transfer the amount.\r\n        balances[msg.sender] -= amount;\r\n        balances[to] += amount;\r\n    }\r\n\r\n    /**\r\n     * Read only function to retrieve the token balance of a given account.\r\n     *\r\n     * The `view` modifier indicates that it doesn't modify the contract's\r\n     * state, which allows us to call it without executing a transaction.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256) {\r\n        return balances[account];\r\n    }\r\n}"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}