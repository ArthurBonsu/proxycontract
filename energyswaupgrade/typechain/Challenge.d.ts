/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface ChallengeInterface extends ethers.utils.Interface {
  functions: {
    "TestifContract(address)": FunctionFragment;
    "addressToUint256(address)": FunctionFragment;
    "bytesToAddress(bytes)": FunctionFragment;
    "convertfromuinttobytes(uint256)": FunctionFragment;
    "factory()": FunctionFragment;
    "incrementX(address,uint256)": FunctionFragment;
    "incrementY(uint256)": FunctionFragment;
    "incrementZ(uint256)": FunctionFragment;
    "incrementaddress()": FunctionFragment;
    "isContract(address)": FunctionFragment;
    "isHuman(address)": FunctionFragment;
    "toBytes(address)": FunctionFragment;
    "uint256ToAddress(uint256)": FunctionFragment;
    "x()": FunctionFragment;
    "y()": FunctionFragment;
    "z()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "TestifContract",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "addressToUint256",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "bytesToAddress",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "convertfromuinttobytes",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "factory", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "incrementX",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "incrementY",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "incrementZ",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "incrementaddress",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "isContract", values: [string]): string;
  encodeFunctionData(functionFragment: "isHuman", values: [string]): string;
  encodeFunctionData(functionFragment: "toBytes", values: [string]): string;
  encodeFunctionData(
    functionFragment: "uint256ToAddress",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "x", values?: undefined): string;
  encodeFunctionData(functionFragment: "y", values?: undefined): string;
  encodeFunctionData(functionFragment: "z", values?: undefined): string;

  decodeFunctionResult(
    functionFragment: "TestifContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addressToUint256",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "bytesToAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "convertfromuinttobytes",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "factory", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "incrementX", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "incrementY", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "incrementZ", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "incrementaddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "isContract", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "isHuman", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "toBytes", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "uint256ToAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "x", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "y", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "z", data: BytesLike): Result;

  events: {};
}

export class Challenge extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: ChallengeInterface;

  functions: {
    TestifContract(
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    addressToUint256(
      account: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    bytesToAddress(
      source: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string]>;

    convertfromuinttobytes(
      n: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    factory(overrides?: CallOverrides): Promise<[string]>;

    "incrementX(address,uint256)"(
      incaddress: string,
      _x: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "incrementX(uint256)"(
      _x: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "incrementY(uint256)"(
      _y: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "incrementY(address,uint256)"(
      incaddress: string,
      _y: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "incrementZ(uint256)"(
      _z: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "incrementZ(address,uint256)"(
      incaddress: string,
      _z: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    incrementaddress(overrides?: CallOverrides): Promise<[string]>;

    isContract(
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    isHuman(
      addr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    toBytes(
      a: string,
      overrides?: CallOverrides
    ): Promise<[string] & { b: string }>;

    uint256ToAddress(
      num: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    x(overrides?: CallOverrides): Promise<[BigNumber]>;

    y(overrides?: CallOverrides): Promise<[BigNumber]>;

    z(overrides?: CallOverrides): Promise<[BigNumber]>;
  };

  TestifContract(
    account: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  addressToUint256(
    account: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  bytesToAddress(source: BytesLike, overrides?: CallOverrides): Promise<string>;

  convertfromuinttobytes(
    n: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  factory(overrides?: CallOverrides): Promise<string>;

  "incrementX(address,uint256)"(
    incaddress: string,
    _x: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "incrementX(uint256)"(
    _x: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "incrementY(uint256)"(
    _y: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "incrementY(address,uint256)"(
    incaddress: string,
    _y: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "incrementZ(uint256)"(
    _z: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "incrementZ(address,uint256)"(
    incaddress: string,
    _z: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  incrementaddress(overrides?: CallOverrides): Promise<string>;

  isContract(
    account: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  isHuman(
    addr: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  toBytes(a: string, overrides?: CallOverrides): Promise<string>;

  uint256ToAddress(
    num: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  x(overrides?: CallOverrides): Promise<BigNumber>;

  y(overrides?: CallOverrides): Promise<BigNumber>;

  z(overrides?: CallOverrides): Promise<BigNumber>;

  callStatic: {
    TestifContract(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    addressToUint256(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    bytesToAddress(
      source: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    convertfromuinttobytes(
      n: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    factory(overrides?: CallOverrides): Promise<string>;

    "incrementX(address,uint256)"(
      incaddress: string,
      _x: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "incrementX(uint256)"(
      _x: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "incrementY(uint256)"(
      _y: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "incrementY(address,uint256)"(
      incaddress: string,
      _y: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "incrementZ(uint256)"(
      _z: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "incrementZ(address,uint256)"(
      incaddress: string,
      _z: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    incrementaddress(overrides?: CallOverrides): Promise<string>;

    isContract(account: string, overrides?: CallOverrides): Promise<boolean>;

    isHuman(addr: string, overrides?: CallOverrides): Promise<boolean>;

    toBytes(a: string, overrides?: CallOverrides): Promise<string>;

    uint256ToAddress(
      num: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    x(overrides?: CallOverrides): Promise<BigNumber>;

    y(overrides?: CallOverrides): Promise<BigNumber>;

    z(overrides?: CallOverrides): Promise<BigNumber>;
  };

  filters: {};

  estimateGas: {
    TestifContract(
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    addressToUint256(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    bytesToAddress(
      source: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    convertfromuinttobytes(
      n: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    factory(overrides?: CallOverrides): Promise<BigNumber>;

    "incrementX(address,uint256)"(
      incaddress: string,
      _x: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "incrementX(uint256)"(
      _x: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "incrementY(uint256)"(
      _y: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "incrementY(address,uint256)"(
      incaddress: string,
      _y: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "incrementZ(uint256)"(
      _z: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "incrementZ(address,uint256)"(
      incaddress: string,
      _z: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    incrementaddress(overrides?: CallOverrides): Promise<BigNumber>;

    isContract(
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    isHuman(
      addr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    toBytes(a: string, overrides?: CallOverrides): Promise<BigNumber>;

    uint256ToAddress(
      num: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    x(overrides?: CallOverrides): Promise<BigNumber>;

    y(overrides?: CallOverrides): Promise<BigNumber>;

    z(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    TestifContract(
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    addressToUint256(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    bytesToAddress(
      source: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    convertfromuinttobytes(
      n: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    factory(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "incrementX(address,uint256)"(
      incaddress: string,
      _x: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "incrementX(uint256)"(
      _x: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "incrementY(uint256)"(
      _y: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "incrementY(address,uint256)"(
      incaddress: string,
      _y: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "incrementZ(uint256)"(
      _z: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "incrementZ(address,uint256)"(
      incaddress: string,
      _z: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    incrementaddress(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isContract(
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    isHuman(
      addr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    toBytes(
      a: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    uint256ToAddress(
      num: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    x(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    y(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    z(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
