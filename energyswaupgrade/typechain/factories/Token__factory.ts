/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type { Token, TokenInterface } from "../Token";

const _abi = [
  {
    inputs: [
      {
        internalType: "address payable",
        name: "_owner",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "account",
        type: "address",
      },
    ],
    name: "balanceOf",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "name",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "sender",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "symbol",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "totalSupply",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address payable",
        name: "_sender",
        type: "address",
      },
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "transfer",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x60806040526040518060400160405280601081526020017f4d79204861726468617420546f6b656e0000000000000000000000000000000081525060009080519060200190620000519291906200018a565b506040518060400160405280600381526020017f4d48540000000000000000000000000000000000000000000000000000000000815250600190805190602001906200009f9291906200018a565b50620f4240600255348015620000b457600080fd5b5060405162000c2838038062000c288339818101604052810190620000da919062000251565b80600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060025460056000600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505062000330565b8280546200019890620002b1565b90600052602060002090601f016020900481019282620001bc576000855562000208565b82601f10620001d757805160ff191683800117855562000208565b8280016001018555821562000208579182015b8281111562000207578251825591602001919060010190620001ea565b5b5090506200021791906200021b565b5090565b5b80821115620002365760008160009055506001016200021c565b5090565b6000815190506200024b8162000316565b92915050565b6000602082840312156200026457600080fd5b600062000274848285016200023a565b91505092915050565b60006200028a8262000291565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006002820490506001821680620002ca57607f821691505b60208210811415620002e157620002e0620002e7565b5b50919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b62000321816200027d565b81146200032d57600080fd5b50565b6108e880620003406000396000f3fe608060405234801561001057600080fd5b506004361061007d5760003560e01c806370a082311161005b57806370a08231146100dc5780638da5cb5b1461010c57806395d89b411461012a578063beabacc8146101485761007d565b806306fdde031461008257806318160ddd146100a057806367e404ce146100be575b600080fd5b61008a610164565b604051610097919061061f565b60405180910390f35b6100a86101f2565b6040516100b59190610661565b60405180910390f35b6100c66101f8565b6040516100d39190610604565b60405180910390f35b6100f660048036038101906100f19190610512565b61021e565b6040516101039190610661565b60405180910390f35b610114610267565b6040516101219190610604565b60405180910390f35b61013261028d565b60405161013f919061061f565b60405180910390f35b610162600480360381019061015d919061053b565b61031b565b005b60008054610171906107a3565b80601f016020809104026020016040519081016040528092919081815260200182805461019d906107a3565b80156101ea5780601f106101bf576101008083540402835291602001916101ea565b820191906000526020600020905b8154815290600101906020018083116101cd57829003601f168201915b505050505081565b60025481565b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000600560008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6001805461029a906107a3565b80601f01602080910402602001604051908101604052809291908181526020018280546102c6906107a3565b80156103135780601f106102e857610100808354040283529160200191610313565b820191906000526020600020905b8154815290600101906020018083116102f657829003601f168201915b505050505081565b82600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508060056000600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020541015610400576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016103f790610641565b60405180910390fd5b8060056000600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461047191906106ee565b9250508190555080600560008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546104c79190610698565b92505081905550505050565b6000813590506104e28161086d565b92915050565b6000813590506104f781610884565b92915050565b60008135905061050c8161089b565b92915050565b60006020828403121561052457600080fd5b6000610532848285016104d3565b91505092915050565b60008060006060848603121561055057600080fd5b600061055e868287016104e8565b935050602061056f868287016104d3565b9250506040610580868287016104fd565b9150509250925092565b61059381610722565b82525050565b60006105a48261067c565b6105ae8185610687565b93506105be818560208601610770565b6105c781610833565b840191505092915050565b60006105df601183610687565b91506105ea82610844565b602082019050919050565b6105fe81610766565b82525050565b6000602082019050610619600083018461058a565b92915050565b600060208201905081810360008301526106398184610599565b905092915050565b6000602082019050818103600083015261065a816105d2565b9050919050565b600060208201905061067660008301846105f5565b92915050565b600081519050919050565b600082825260208201905092915050565b60006106a382610766565b91506106ae83610766565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff038211156106e3576106e26107d5565b5b828201905092915050565b60006106f982610766565b915061070483610766565b925082821015610717576107166107d5565b5b828203905092915050565b600061072d82610746565b9050919050565b600061073f82610746565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b60005b8381101561078e578082015181840152602081019050610773565b8381111561079d576000848401525b50505050565b600060028204905060018216806107bb57607f821691505b602082108114156107cf576107ce610804565b5b50919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6000601f19601f8301169050919050565b7f4e6f7420656e6f75676820746f6b656e73000000000000000000000000000000600082015250565b61087681610722565b811461088157600080fd5b50565b61088d81610734565b811461089857600080fd5b50565b6108a481610766565b81146108af57600080fd5b5056fea264697066735822122078ff82136b0dc7255df804b1b73f87c3d95dfbff0e66a16dd80025ca329efb3064736f6c63430008020033";

export class Token__factory extends ContractFactory {
  constructor(signer?: Signer) {
    super(_abi, _bytecode, signer);
  }

  deploy(
    _owner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<Token> {
    return super.deploy(_owner, overrides || {}) as Promise<Token>;
  }
  getDeployTransaction(
    _owner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(_owner, overrides || {});
  }
  attach(address: string): Token {
    return super.attach(address) as Token;
  }
  connect(signer: Signer): Token__factory {
    return super.connect(signer) as Token__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): TokenInterface {
    return new utils.Interface(_abi) as TokenInterface;
  }
  static connect(address: string, signerOrProvider: Signer | Provider): Token {
    return new Contract(address, _abi, signerOrProvider) as Token;
  }
}
